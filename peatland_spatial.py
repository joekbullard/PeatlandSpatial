# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PeatlandSpatial
                                 A QGIS plugin
 This plugin contains tools for working with Peatland ACTION spatial data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-04-10
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Joe Bullard
        email                : joekbullard@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import (
    edit,
    QgsProject,
    Qgis,
    QgsWkbTypes,
    QgsMapLayer,
    QgsVectorFileWriter,
    QgsVectorLayer,
    QgsField,
)

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .peatland_spatial_dialog import PeatlandSpatialDialog
from zipfile import ZipFile
from pathlib import Path


class PeatlandSpatial:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = Path(__file__).parent
        # initialize locale
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = (
            Path(self.plugin_dir) / "i18n" / "PeatlandSpatial_{}.qm".format(locale)
        )

        if Path(locale_path).exists():
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&Peatland ACTION Tools")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("PeatlandSpatial", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ":/plugins/peatland_spatial/icon.png"
        self.add_action(
            icon_path,
            text=self.tr("Generate peat depth grid"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

        # will be set False in run()
        self.first_start = True

    def generate_peat_layer(self):
        """Create a peat depth point layer"""
        peat_layer = QgsVectorLayer("Point", "peat_depth_points", "memory")
        crs = peat_layer.crs()
        crs.createFromId(27700)
        peat_layer.setCrs(crs)
        pr = peat_layer.dataProvider()
        
        pr.addAttributes(
            [
                QgsField("record_id", QVariant.Int),
                QgsField("easting", QVariant.Int),
                QgsField("northing", QVariant.Int),
                QgsField("date", QVariant.Date),
                QgsField("peat_depth", QVariant.Int),
                QgsField("main_con", QVariant.String),
                QgsField("sub_con", QVariant.String),
                QgsField("notes", QVariant.String),
                QgsField("photo", QVariant.String),
            ]
        )
        peat_layer.updateFields()

        return peat_layer

        

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(self.tr("&Peatland ACTION Tools"), action)
            self.iface.removeToolBarIcon(action)

    def select_output_folder(self):
        folder = QFileDialog.getExistingDirectory(self.dlg, "Select output folder")
        self.dlg.projectLocationEdit.setText(folder)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = PeatlandSpatialDialog()
            self.dlg.projectLocationTool.clicked.connect(self.select_output_folder)

        # Fetch the currently loaded layers
        layers = QgsProject.instance().mapLayers().values()
        poly_layers = []
        for layer in layers:
            if layer.type() == QgsMapLayer.VectorLayer:
                if layer.geometryType() == QgsWkbTypes.PolygonGeometry:
                    print(type(layer))
                    poly_layers.append(layer)
        # Clear the contents of the comboBox from previous runs
        self.dlg.projectLocationEdit.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.siteOutline.clear()
        self.dlg.siteOutline.addItems([layer.name() for layer in poly_layers])

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            dirname = self.dlg.projectLocationEdit.text()
            gpkg = Path(dirname) / "peat_depth_data.gpkg"
            print(gpkg)
            # extract project file and geopackage to target directory
            # TODO add error handling block for when files already exist
            with ZipFile(
                Path(__file__).parent / "peat_depth_files" / "peat_depth_template.zip"
            ) as zf:
                for f in zf.infolist():
                    filename = Path(dirname) / f.filename
                    if not Path(filename).exists():
                        zf.extract(f, dirname)
                    else:
                        self.iface.messageBar().pushMessage(
                            f"{f.filename} already exists at {dirname}",
                            "Skipping extract",
                            level=Qgis.Warning,
                            duration=3,
                        )

            selected_layer_index = self.dlg.siteOutline.currentIndex()
            selected_layer = poly_layers[selected_layer_index]

            peat_layer = self.generate_peat_layer()

            QgsProject.instance().addMapLayer(peat_layer)
            """
            _writer = QgsVectorFileWriter.writeAsVectorFormat(
                layer=selected_layer,
                fileName=gpkg.as_posix(),
                fileEncoding="utf-8",
                destCRS=selected_layer.crs(),
            )
            """
            # for feature in selected_layer.getFeatures():

            # TODO copy site boundary to site_outline layer
            # TODO iterate over features of new outline layer
            # TODO generate extent then create points that fall within
            # TODO add points to peat_depth layer
            # TODO add option to generate 50m points in addition to 100m points

            pass
